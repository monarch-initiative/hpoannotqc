package org.monarchinitiative.hpoannotqc.cmd;

import com.beust.jcommander.Parameter;
import com.beust.jcommander.Parameters;
import org.monarchinitiative.phenol.annotations.assoc.HpoAssociationParser;
import org.monarchinitiative.phenol.annotations.formats.hpo.HpoGeneAnnotation;
import org.monarchinitiative.phenol.io.OntologyLoader;
import org.monarchinitiative.phenol.ontology.data.Ontology;


import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

@Parameters(commandDescription = "Create genes to phenotypes file")
public class Genes2PhenotypesCommand implements Command  {
    /** Directory with hp.obo and en_product>HPO.xml files. */
    @Parameter(names={"-d","--data"}, description ="directory to download data (default: data)" )
    private String downloadDirectory="data";
    @Parameter(names={"--annot"}, description = "path to phenotype.hpoa file (as generated by this program)",
    required = true)
    private String phenotypeDotHpoa;
    @Parameter(names={"--outfile"}, description = "name/path of output file")
    private String outfile = "phenotype_to_genes.tsv";

    public Genes2PhenotypesCommand(){}




    public void execute() {
        String hpOboPath = String.format("%s%s%s",downloadDirectory,File.separator, "hp.obo" );
        String orphanetGenesXMLpath = String.format("%s%s%s",downloadDirectory,File.separator, "en_product6.xml" );
        String mimgenepath = String.format("%s%s%s",downloadDirectory,File.separator, "mim2gene_medgen" );
        String geneinfopath =  String.format("%s%s%s",downloadDirectory,File.separator, "Homo_sapiens_gene_info.gz" );

        File hpoFile = new File(hpOboPath);
        if (! hpoFile.exists()) {
            throw new RuntimeException("Could not find hp.obo at " + hpOboPath);
        }
       Ontology ontology = OntologyLoader.loadOntology(hpoFile);


       HpoAssociationParser parser = new HpoAssociationParser(geneinfopath,mimgenepath,orphanetGenesXMLpath,phenotypeDotHpoa,ontology);
       List<HpoGeneAnnotation> annotLisrt = parser.getPhenotypeToGene();
       if (annotLisrt == null) {
           System.err.println("[FATAL] could not retrieve HPO gene annotation list");
           System.exit(1);
       }
       int c = 0;
       try {
           BufferedWriter br = new BufferedWriter(new FileWriter(this.outfile));
            br.write("#Format: HPO-ID<tab>HPO-Name<tab>Gene-ID<tab>Gene-Name\n");
           for (HpoGeneAnnotation hga : annotLisrt) {
               br.write(hga.getTermId().getValue() + "\t" +
                       hga.getTermName() + "\t" +
                       hga.getEntrezGeneId() + "\t" +
                       hga.getEntrezGeneSymbol() + "\n");
               c++;
           }
           br.close();
       } catch (IOException e) {
           e.printStackTrace();
       }
       System.out.println("[INFO] We wrote " + c + " lines of the phenotype<->genes data to file");



    }




}
